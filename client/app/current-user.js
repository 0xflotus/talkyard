/* Provides info on the current user.
 * Copyright (C) 2010 - 2013 Kaj Magnus Lindberg (born 1979)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

var d = { i: debiki.internal, u: debiki.v0.util };
var $ = d.i.$;


// Returns a user object, with functions refreshProps, getName,
// isLoggedIn and getUserId.
d.i.makeCurUser = function() {
  // Cache user properties â€” parsing the session id cookie over and
  // over again otherwise takes 70 - 80 ms on page load, but only
  // 2 ms when cached. (On my 6 core 2.8 GHz AMD, for a page with
  // 100 posts. The user id is checked frequently, to find out which
  // posts have the current user written.)
  var userProps;

  function refreshProps() {
    parseSidCookie();
  }

  // Warning: Never use the user's name as html, that'd allow xss attacks.
  // (userId is generated by the server.)
  function parseSidCookie() {
    // sid example:
    //   Y1pBlH7vY4JW9A.11.Magnus.1316266102779.15gl0p4xf7
    var sid = $.cookie('dwCoSid');
    if (!sid) {
      userProps = { userId: undefined, name: undefined };
      return;
    }
    var arr = sid.split('.');
    userProps = {
      // [0] is a hash
      userId: arr[1],
      name: arr[2].replace('_', '.')
      // [3] is login time
      // [4] is a random value
    };
  }

  function fireLoginIfNewSession() {
    var userIdBefore = userProps.userId;
    refreshProps();
    if (userIdBefore !== userProps.userId) {
      if (api.isLoggedIn()) api.fireLogin();
      else api.fireLogout();
      // If the login/logout happened in another browser tab:
      // COULD pop up a modal dialog informing the user that s/he has
      // been logged in/out, because of something s/he did in *another* tab.
      // And that any posts s/he submits will be submitted as the new user.
    }
  }

  var api = {
    // Call whenever the SID changes: on page load, on login and logout.
    refreshProps: refreshProps,
    fireLogin: function() { fireLoginImpl(api); },
    fireLogout: function() { fireLogoutImpl(api); },
    // Call when a re-login might have happened, e.g. if focusing
    // another browser tab and then returning to this tab.
    fireLoginIfNewSession: fireLoginIfNewSession,
    isLoggedIn: function() { return userProps.userId ? true : false; },
  };

  return api;
};


function fireLoginImpl(Me) {
  Me.refreshProps();
  debiki2.ReactActions.login();
};


// Updates cookies and elements to show the user name, email etc.
// as appropriate. Unless !propsUnsafe, throws if name or email missing.
// Parameters:
//  props: {name, email, website}, will be sanitized unless
//  sanitize: unless `false', {name, email, website} will be sanitized.
function fireLogoutImpl(Me) {
  Me.refreshProps();
  debiki2.ReactActions.logout();
};


// vim: fdm=marker et ts=2 sw=2 fo=tcqwn list
