# See: https://openresty.org/en/installation.html

# COULD_OPTIMIZE smaller image: Copy just what's needed from openresty_build.
FROM alpine:3.12 AS openresty_build


# '--virtual .build_deps' lets one uninstall all these build dependencies,
# like so:  'apk del .build_deps' (done at the end of this file)
#
RUN apk add --no-cache --virtual .build_deps \
        build-base \
        coreutils \
        # Library for the dynamic creation of images by programmers
        # Needed for http_image_filter_module?
        #gd-dev \
        # Looks up countries by IP addresses.
        # See: 	http://www.maxmind.com/app/ip-location
        geoip-dev \
        #libxslt-dev \
        linux-headers \
        make \
        perl-dev \
        readline-dev \
        zlib-dev \
        openssl-dev \
        pcre-dev \
        # Installs /usr/bin/envsubst
        gettext


RUN apk add --no-cache \
        curl \
        #gd \
        geoip \
        libgcc \
        #libxslt \
        zlib


# Add 'bash' so we can 'docker exec' into the container, + some tools
# (wget & less already works).  And gdb, for backtracing core dumps. [NGXCORED]
RUN apk add --no-cache bash tree net-tools gdb \
  # Telnet, nice for troubleshooting.
  busybox-extras


COPY openresty/source /tmp/openresty-source


# OpenResty's default --prefix is: '/usr/local/openresty'.

ARG CONFIG="\
	--conf-path=/etc/nginx/nginx.conf \
  \
	--sbin-path=/usr/sbin/nginx \
	--modules-path=/usr/lib/nginx/modules \
  \
	--error-log-path=/var/log/nginx/error.log \
	--http-log-path=/var/log/nginx/access.log \
  \
	--pid-path=/var/run/nginx.pid \
	--lock-path=/var/run/nginx.lock \
  \
	--http-client-body-temp-path=/var/cache/nginx/client_temp \
	--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
  # Not using these:
	#--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
	#--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
	#--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
  \
	--user=nginx \
	--group=nginx \
  \
  \
  # Enable modules:
  #
  # Modules list:
  # https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#modules_default
  #
  # Modules source code:
  # https://trac.nginx.org/nginx/browser/nginx/src/http/modules/
  \
  # --with-http_addition_module \
  --with-http_auth_request_module \
  # --with-http_dav_module \
  # --with-http_geoip_module=dynamic \
  # --with-http_gunzip_module \
  --with-http_gzip_static_module \
  # --with-http_image_filter_module=dynamic \
  --with-http_mp4_module \
  # --with-http_random_index_module \
  --with-http_realip_module \
  # Can check authenticity of requested links, access control, limit link lifetime.
  # --with-http_secure_link_module \
  # --with-http_slice_module \
  --with-http_ssl_module \
  # Basic Nginx status info.
  --with-http_stub_status_module \
  # --with-http_sub_module \
  \
  # HTTP2 doesn't work with Lua scripts that call ngx.location.capture/_multi(..),
  # there'd be runtime errors. See [63DRN3M75] in ./old/.
  # Or maybe works now with OpenResty?
  --with-http_v2_module \
  \
  --with-ipv6 \
  # --with-mail \
  # --with-mail_ssl_module \
  --with-md5-asm \
  --with-pcre-jit \
  --with-sha1-asm \
  \
  # Enables TCP and UDP proxy functionality.
  --with-stream \
  --with-stream_ssl_module \
  \
  # Thread pools.
  --with-threads \
  \
  \
  # Disable modules: (Nginx and Lua)
  \
  # Is needed for 'charset utf-8;', see nginx.conf.
  #--without-http_charset_module \
  \
  # No auto index. If ever enabling, add 'autoindex off' here: [5KUP293]
  --without-http_autoindex_module \
  \
  # No server-side-includes.
  --without-http_ssi_module \
  \
  # No FastCGI or CGI.
  --without-http_fastcgi_module \
  --without-http_scgi_module \
  \
  # No Python (instead, the JVM and http_proxy_module).
  # 'WSGI' means Web Server Gateway Interface, and is a calling
  # convention for forwarding requests to an app server named 'uwsgi'
  # for Python apps?
  --without-http_uwsgi_module \
  \
  # No Memcached (instead, Redis).
  --without-http_memcached_module \
  --without-lua_resty_memcached \
  \
  # No Mysql (instead, Postgres).
  --without-lua_resty_mysql \
  "

RUN \
	addgroup -S nginx \
	&& adduser -D -S -h /var/cache/nginx -s /sbin/nologin -G nginx nginx \
  \
  && cd /tmp/openresty-source \
  \
  # Debug build.
  #&& ./configure $CONFIG \
  #    # Enables debug log messages: (otherwise they won't get logged at all, never?)
  #    --with-debug \
  #    # So can backtrace core dumps: [NGXCORED]
  #    --with-cc-opt='-O0 -ggdb3 -fvar-tracking-assignments' \
  #&& make -j$(getconf _NPROCESSORS_ONLN) \
  # But is this the correct path, now with OpenResty?
  #&& mv objs/nginx objs/nginx-debug \
  \
  # Prod build.
  && ./configure $CONFIG \
        # Incl debug symbols in prod builds (but not -O0).  [NGXCORED]
        --with-cc-opt='-ggdb' \
  && make -j$(getconf _NPROCESSORS_ONLN) \
  && make install \
  \
  # Don't, then wouldn't be able to backtrace core dumps.  [NGXCORED]
  #&& strip /usr/sbin/nginx* \
  \
  # Copy, so won't get deleted when cleaning up build_deps.
  # (Was installed via package gettext.)
  && mv /usr/bin/envsubst /tmp/ \
  \
  # Runtime dependencies
	&& runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	&& apk add --no-cache --virtual .nginx_rundeps $runDeps \
  \
  && apk del .build_deps \
  \
  # Move back
  && mv /tmp/envsubst /usr/local/bin/ \
  \
  && mkdir -p /var/run/openresty \
  \
  # Bring in tzdata so users could set the timezones through the environment
  # variables
  && apk add --no-cache tzdata \
  \
	# forward request and error logs to docker log collector
  #&& mkdir -p /var/log/nginx \
	&& ln -sf /dev/stdout /var/log/nginx/access.log \
	&& ln -sf /dev/stderr /var/log/nginx/error.log \
  && echo

# better also add the following line to your ~/.bashrc or ~/.bash_profile file.
#export PATH=/usr/local/openresty/bin:$PATH


# ?
# Add additional binaries into PATH for convenience
ENV PATH=$PATH:/usr/local/openresty/luajit/bin:/usr/local/openresty/nginx/sbin:/usr/local/openresty/bin



# Fonts
# ===================================
#
# Barely ever changes. (Is about 1.6 M and takes some seconds to copy,
# so nice to copy before other smaller things further below.)
#
# Generate the list of font files to copy like so:
#   cd images/web/  # this dir
#   ls -1 node_modules/fontsource-open-sans/files/open-sans-????*-{300,400,600}*.woff*
# (Is there no way to change the dir in the host file system?)

COPY fonts /opt/talkyard/fonts

# This shell like expansion not work:  ...{300,400,600}...
# Instead:
COPY \
    # This: '????*' excludes the "-all-" bundles.
    # Sync font sizes with gulpfile.js css file list. [sync_fonts]
    node_modules/fontsource-open-sans/files/open-sans-????*-300-*.woff* \
    node_modules/fontsource-open-sans/files/open-sans-????*-400-*.woff* \
    node_modules/fontsource-open-sans/files/open-sans-????*-600-*.woff* \
    # Sync 'open-sans-v1' with Makefile and gulpfile.js. [sync_fonts]
    /opt/talkyard/fonts/open-sans-v1/files/



# Nginx and Lua files
# ===================================


# Remove default files, they're very confusing, if ogging in to Nginx
# and looking at /etc/nginx/:
RUN cd /etc/nginx && \
  rm -fr \
      # Keep mime.types though.
      # (Our actual Nginx config will be in nginx.conf.template, which we
      # process with envsubst at startup, and save as nginx.conf.)
      mime.types.default \
      nginx.conf \
      nginx.conf.default \
      # We don't use FastCGI.
      #fastcgi*
      \
   # Nice:
   && echo 'alias ll="ls -l"' >> ~/.bashrc \
   && echo 'alias ..="cd .."' >> ~/.bashrc \
   && echo 'alias ...="cd ../.."' >> ~/.bashrc \
   && echo 'alias ....="cd ../../.."' >> ~/.bashrc \
   && echo 'alias .....="cd ../../../.."' >> ~/.bashrc \
   && echo


COPY lua-packages/lua-resty-http /opt/lua-packages/lua-resty-http


COPY ssl-cert-snakeoil.key /etc/nginx/
COPY ssl-cert-snakeoil.pem /etc/nginx/

COPY html                 /opt/nginx/html/

# For development. Another directory gets mounted in prod, see <talkyard-prod-one>/docker-compose.yml.
COPY sites-enabled-manual /etc/nginx/sites-enabled-manual/

# old, remove once I've edited edm & edc
COPY server-listen.conf   /etc/nginx/listen.conf

# old, remove, doesn't specify backlog sice — and may do only once, so rather useless.
COPY server-listen.conf   /etc/nginx/

# old, remove once I've edited edm & edc
COPY server-ssl.conf      /etc/nginx/ssl-hardening.conf

COPY server-ssl.conf      /etc/nginx/
COPY http-limits.conf     /etc/nginx/http-limits.conf.template

# old, remove, now done in  <talkyard-prod-one>/conf/sites-enabled-manual/talkyard-servers.conf  instead. [ty_v1]
COPY http-redirect-to-https.conf /etc/nginx/

COPY server-limits.conf   /etc/nginx/server-limits.conf.template

# old, remove once I've edited edm & edc
COPY server-locations.conf /etc/nginx/vhost.conf.template

# old, too, remove, when?
COPY server-locations.conf /etc/nginx/server.conf.template

COPY server-locations.conf /etc/nginx/server-locations.conf.template
COPY nginx.conf           /etc/nginx/nginx.conf.template



# Env vars
# ===================================


COPY run-envsubst.sh  /etc/nginx/run-envsubst.sh
RUN  chmod ugo+x      /etc/nginx/run-envsubst.sh
# Sync with variables in  run-envsubst.sh  and  docker-compose-no-limits.yml  [0KW2UY3].
# CLEAN_UP change prefix to TY_  [ty_v1]
#
# ED_NGX_LIMIT_CONN_PER_IP=60 is a lot? But maybe some people connect from
# an office building, same IP addr?
#
# Set the default allowed request body size to something fairly large — 25m (megabytes)
# — so self hosted people can upload Mac Retina screenshots (they're maybe 10 MB) and
# small videos, without having to ask for help at Talkyard.io.
ENV \
    ED_NGX_LIMIT_CONN_PER_IP=60 \
    ED_NGX_LIMIT_CONN_PER_SERVER=10000 \
    ED_NGX_LIMIT_REQ_PER_IP=30 \
    ED_NGX_LIMIT_REQ_PER_IP_BURST=200 \
    ED_NGX_LIMIT_REQ_PER_SERVER=200 \
    ED_NGX_LIMIT_REQ_PER_SERVER_BURST=2000 \
    TY_NGX_LIMIT_REQ_BODY_SIZE=25m \
    ED_NGX_LIMIT_RATE=50k \
    ED_NGX_LIMIT_RATE_AFTER=5m \
    # Wait with setting this to a year (31536000), until things more tested.
		# ('s-maxage = ...' and 'public' are for shared proxies and CDNs)
    TY_MAX_AGE_YEAR="max-age=2592000, s-maxage=2592000, public" \
    TY_MAX_AGE_MONTH="max-age=2592000, s-maxage=2592000, public" \
    TY_MAX_AGE_WEEK="max-age=604800, s-maxage=604800, public" \
    TY_MAX_AGE_DAY="max-age=86400, s-maxage=86400, public"



# Scripts and styles
# ===================================
#
# Frequently edited, so do last.

COPY ty-media /opt/talkyard/ty-media
COPY ed-lua   /opt/talkyard/lua/
COPY assets   /opt/talkyard/assets



EXPOSE 80 443

# Core dumps
# Works without:  chown root:root /tmp/cores  &&  ulimit -c unlimited
# Place this:  kill(getpid(), SIGSEGV);   (from: https://stackoverflow.com/a/1657244/694469 )
# to crash and generate a core dump at some specific location.
# (This also core dumps, but cannot backtrace the dump: `raise(SIGABRT)`)
# Inspect e.g. like so:  # gdb /usr/sbin/nginx-debug /tmp/cores/core.nginx-debug.17
# then type `bt` or `bt f` (backtrace full).
#
# Make the container privileged, in docker-compose.yml for this to work. [NGXCORED] [NGXSEGFBUG]
#CMD chmod 1777 /tmp/cores \
#  && sysctl -w fs.suid_dumpable=2 \
#  && sysctl -p \
#  && echo "/tmp/cores/core.%e.%p" > /proc/sys/kernel/core_pattern \
#  && /etc/nginx/run-envsubst.sh \
#  && nginx-debug

CMD /etc/nginx/run-envsubst.sh && nginx