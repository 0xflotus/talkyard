

  # The below Lua code, previously used here: [63DRN3M75] causes this error,
  # with HTTP2: (because then location.capture won't work)
  #
  #    2020/02/08 22:48:19 [error] 13#13: *21 lua entry thread aborted:
  #          runtime error: access_by_lua(server-locations.conf:243):3:
  #          http2 requests not supported yet
  #    stack traceback:
  #    coroutine 0:
  #    	[C]: in function 'capture'
  #    	access_by_lua(server-locations.conf:243):3: in function
  #           <access_by_lua(server-locations.conf:243):1>, client: 172.27.0.1,
  #           server: _, request:
  #           "GET /-/u/e7ef490a7332/4/4/p6ua73te4zcenn7wfvxaycasffjncf5z.jpg HTTP/2.0",
  #           host: "site-3.localhost"
  #
  # See: https://github.com/openresty/lua-nginx-module/issues/1195
  # and https://github.com/openresty/lua-nginx-module/issues/1611
  # and https://github.com/openresty/lua-nginx-module/commit/3078ca6138121a98e22104b9f7015b31d312861b.
  #
  # So, Talkyard cannot use ngx.location.capture, from Lua.
  # Maybe instead: https://github.com/ledgetech/lua-resty-http if needed?

  # ngx.location.capture is synchronous, but non-blocking: the code execution stops, until
  # a response is received â€” but meanwhile, the nginx worker continues with other things.)
  access_by_lua '
    response = ngx.location.capture("/_auth_upload/" .. ngx.var.pubSiteId .. "/" .. ngx.var.hashPath)
    if response.status == 404 then
      ngx.status = 404
      -- Without text/plain, the response body just disappears somehow, for images (.jpg) at least.
      ngx.header.content_type = "text/plain"
      ngx.say("404 Not found. [TyNGXFKB604]")
      return ngx.exit(ngx.OK)
    end
    if response.status == 401 or response.status == 403 then
      ngx.status = response.status
      ngx.header.content_type = "text/plain"
      ngx.say(response.status .. " Access denied. [TyNGX5KWA2]")
      return ngx.exit(ngx.OK)
    end';
