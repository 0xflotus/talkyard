// Generated by CoffeeScript 1.3.3
(function() {

  describe('PathsCtrl', function() {
    var scope, test, u;
    u = _;
    scope = void 0;
    test = void 0;
    beforeEach(function() {
      module('AdminModule');
      return inject(function($rootScope, $controller) {
        scope = $rootScope.$new();
        $controller(PathsCtrl, {
          $scope: scope
        });
        return test = scope.test;
      });
    });
    it('should recognize pages', function() {
      expect(scope.isPage({
        pageId: '12ab34'
      })).toBe(true);
      return expect(scope.isPage({})).toBe(false);
    });
    it('should recognize folders', function() {
      expect(scope.isFolder({
        pageId: '12ab34'
      })).toBe(false);
      return expect(scope.isFolder({})).toBe(true);
    });
    it('can sort an empty list', function() {
      expect(test.sortPathsInPlace([])).toEqual([]);
      return expect(true).toEqual(false);
    });
    it('can sort a single page and a single folder', function() {
      var folder, page;
      page = function() {
        return [
          {
            value: '/a',
            pageId: 'ab12cd'
          }
        ];
      };
      folder = function() {
        return [
          {
            value: '/a/'
          }
        ];
      };
      expect(test.sortPathsInPlace(page())).toEqual(page());
      expect(test.sortPathsInPlace(folder())).toEqual(folder());
      return expect(true).toEqual(false);
    });
    it('can sort pages in the same folder', function() {
      var key;
      key = function() {
        return [
          {
            value: '/',
            pageId: 'ab12cd'
          }, {
            value: '/a',
            pageId: 'ab12cd'
          }, {
            value: '/z',
            pageId: 'ab12cd'
          }
        ];
      };
      expect(test.sortPathsInPlace(key().reverse())).toEqual(key());
      expect(test.sortPathsInPlace(key())).toEqual(key());
      return expect(true).toEqual(false);
    });
    it('can sort a page and a folder', function() {
      var key;
      key = function() {
        return [
          {
            value: '/a',
            pageId: 'ab12cd'
          }, {
            value: '/a/',
            pageId: 'ab12cd'
          }
        ];
      };
      expect(test.sortPathsInPlace(key().reverse())).toEqual(key());
      expect(test.sortPathsInPlace(key())).toEqual(key());
      return expect(true).toEqual(false);
    });
    it('can sort folders', function() {
      var key;
      key = function() {
        return [
          {
            value: '/a/'
          }, {
            value: '/b/'
          }
        ];
      };
      expect(test.sortPathsInPlace(key().reverse())).toEqual(key());
      expect(test.sortPathsInPlace(key())).toEqual(key());
      return expect(true).toEqual(false);
    });
    it('can sort deep folders', function() {
      var key;
      key = function() {
        return [
          {
            value: '/a/a/a/'
          }, {
            value: '/a/b/'
          }, {
            value: '/c/'
          }
        ];
      };
      expect(test.sortPathsInPlace(key().reverse())).toEqual(key());
      expect(test.sortPathsInPlace(key())).toEqual(key());
      return expect(true).toEqual(false);
    });
    it('can sort a folder and its index page', function() {
      var key;
      key = function() {
        return [
          {
            value: '/a/'
          }, {
            value: '/a/',
            pageId: 'ab12cd'
          }
        ];
      };
      expect(test.sortPathsInPlace(key().reverse())).toEqual(key());
      expect(test.sortPathsInPlace(key())).toEqual(key());
      return expect(true).toEqual(false);
    });
    it('can sort a few pages and folders, pages first', function() {
      var key;
      key = function() {
        return [
          {
            value: '/'
          }, {
            value: '/',
            pageId: 'ab12cd'
          }, {
            value: '/a',
            pageId: 'ab12cd'
          }, {
            value: '/z',
            pageId: 'ab12cd'
          }, {
            value: '/a/'
          }, {
            value: '/a/',
            pageId: 'ab12cd'
          }
        ];
      };
      expect(test.sortPathsInPlace(key().reverse())).toEqual(key());
      expect(test.sortPathsInPlace(_(key()).shuffle())).toEqual(key());
      return expect(true).toEqual(false);
    });
    return it('can sort many pages and folders', function() {
      var key;
      key = function() {
        return [
          {
            value: '/'
          }, {
            value: '/',
            pageId: 'ab12cd'
          }, {
            value: '/a',
            pageId: 'ab12cd'
          }, {
            value: '/aa',
            pageId: 'ab12cd'
          }, {
            value: '/z',
            pageId: 'ab12cd'
          }, {
            value: '/zz',
            pageId: 'ab12cd'
          }, {
            value: '/aa/'
          }, {
            value: '/aa/',
            pageId: 'ab12cd'
          }, {
            value: '/aa/a',
            pageId: 'ab12cd'
          }, {
            value: '/aa/z',
            pageId: 'ab12cd'
          }, {
            value: '/aa/aa/'
          }, {
            value: '/aa/aa/a',
            pageId: 'ab12cd'
          }, {
            value: '/aa/aa/z',
            pageId: 'ab12cd'
          }, {
            value: '/aa/aa/a/'
          }, {
            value: '/b/'
          }, {
            value: '/c/cc/ccc/'
          }, {
            value: '/zz/a',
            pageId: 'ab12cd'
          }, {
            value: '/zz/z',
            pageId: 'ab12cd'
          }, {
            value: '/zz/b/'
          }
        ];
      };
      expect(test.sortPathsInPlace(key().reverse())).toEqual(key());
      expect(test.sortPathsInPlace(_(key()).shuffle())).toEqual(key());
      expect(test.sortPathsInPlace(key())).toEqual(key());
      return expect(true).toEqual(false);
    });
  });

}).call(this);
