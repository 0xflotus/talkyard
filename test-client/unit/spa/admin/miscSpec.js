// Generated by CoffeeScript 1.3.3
(function() {
  var a, a2, a2b, a2b2, ab, b, b2, testMapValsHelper;

  ab = function() {
    return {
      a: 'aa',
      b: 'bb'
    };
  };

  a = function() {
    return {
      a: 'aa'
    };
  };

  b = function() {
    return {
      b: 'bb'
    };
  };

  a2b2 = function() {
    return {
      a: 'aa2',
      b: 'bb2'
    };
  };

  a2 = function() {
    return {
      a: 'aa2'
    };
  };

  b2 = function() {
    return {
      b: 'bb2'
    };
  };

  a2b = function() {
    return {
      a: 'aa2',
      b: 'bb'
    };
  };

  describe('_.kick', function() {
    return it('should kick away properties from objects', function() {
      expect(_(ab()).kick('b')).toEqual(a());
      expect(_(ab()).kick('a')).toEqual(b());
      return expect(_(ab()).kick('c')).toEqual(ab());
    });
  });

  testMapValsHelper = function(f) {
    var onlyA;
    expect(f({}, function(value) {
      return value + '2';
    })).toEqual({});
    expect(f(a(), function(value) {
      return value + '2';
    })).toEqual(a2());
    expect(f(ab(), function(value) {
      return value + '2';
    })).toEqual(a2b2());
    onlyA = f(ab(), function(value, key) {
      if (key === 'a') {
        return value + '2';
      } else {
        return value;
      }
    });
    return expect(onlyA).toEqual(a2b());
  };

  describe('_.mapVals', function() {
    return it('should transform object property values', function() {
      return testMapValsHelper(_.mapVals);
    });
  });

  describe('_.mapValsKickUndef', function() {
    return it('work as mapVals, and also remove keys mapping to `undefined`', function() {
      var onlyA;
      testMapValsHelper(_.mapValsKickUndef);
      expect(_.mapValsKickUndef({}, function() {
        return void 0;
      })).toEqual({});
      expect(_.mapValsKickUndef(a(), function() {
        return void 0;
      })).toEqual({});
      expect(_.mapValsKickUndef(ab(), function() {
        return void 0;
      })).toEqual({});
      onlyA = _.mapValsKickUndef(ab(), function(value, key) {
        if (key === 'a') {
          return value + '2';
        } else {
          return void 0;
        }
      });
      return expect(onlyA).toEqual(a2());
    });
  });

}).call(this);
