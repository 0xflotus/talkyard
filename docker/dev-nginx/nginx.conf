# nginx config file on the host
# tls: https://mozilla.github.io/server-side-tls/ssl-config-generator/

# useful modules?
# - https://github.com/vozlt/nginx-module-vts


user nginx;

# 'auto' attempts to auto detect the number of CPU cores.
worker_processes auto;

# Run nginx in the foreground.
# (We run nginx via Docker, and by default the nginx command exits directly (because it
# starts nginx as a background daemon) which makes the docker container exits, and then
# the background daemon stops too.)
daemon off;

events {
  # in the Docker image, `ulimit -n` â€“> 524288, and say 10 cores? -> max 52400, say 30 000 then
  worker_connections 30000;
}


http {
  include  /etc/nginx/mime.types;
  default_type  application/octet-stream;

  server_tokens off;
  sendfile on;
  sendfile_max_chunk 2m;
  tcp_nopush on; # if off, then like 14 100 req/sec instead of like 15 300, for 1kb image.

  # We don't require so very lower latency on every packet sent.
  # And John Nagle says it's not needed? https://news.ycombinator.com/item?id=9045125
  tcp_nodelay off;

  # This makes things slower: 14 600 req/sec instead of like 15 300, for 1kb image.
  # aio threads;

  keepalive_timeout  65;


  # ----- HTTPS

  # Note: You should disable gzip for SSL traffic. [kajmagnus: I don't want to disable it. Instead,
  #   don't echo back too private stuff in responses]
  # See: https://bugs.debian.org/773332
  #
  # Read up on ssl_ciphers to ensure a secure configuration.
  # See: https://bugs.debian.org/765782

  # ?? Google says: """Important: The following directives should be positioned after
  # the certificate and key directives in the SSL/TLS server block of your virtual host file.
  # If you've defined a certificate authority PEM file, position these directives after
  # the ssl_trusted_certificate directive; otherwise, position them after the
  # ssl_certificate_key directive"""
  # (https://cloud.google.com/solutions/https-load-balancing-nginx, 2016-05-01)
  # is this the wrong location then ?

  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # Dropping SSLv3, ref: POODLE
  # Google says: """The cipher suite provided here is a strong, minimal suite that disables
  # weak or outmoded encryption methods. Your own suite should be determined by your specific
  # use case."""  (https://cloud.google.com/solutions/https-load-balancing-nginx, 2016-05-01)
  ssl_ciphers EECDH+ECDSA+AESGCM:EECDH+aRSA+AESGCM:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA256:EECDH+ECDSA+SHA384:EECDH+ECDSA+SHA256:EECDH+aRSA+SHA384:EDH+aRSA+AESGCM:EDH+aRSA+SHA256:EDH+aRSA:EECDH:!aNULL:!eNULL:!MEDIUM:!LOW:!3DES:!MD5:!EXP:!PSK:!SRP:!DSS:!RC4:!SEED;
  # Key files referenced from sites-available/*.conf, not from here.

  # Don't:
  # add_header Strict-Transport-Security "max-age=31536000";
  # because the risk that I'll mess something up is too high (as of 2016-05-01).

  # Avoid CPU intensive SSL handshake. 1MB cache contains about 4000 sessions.
  # The default timeout is 5 minutes
  # (See http://nginx.org/en/docs/http/configuring_https_servers.html)
  ssl_session_cache shared:SSL:15m;  # > 15m for large servers?  [memory]
  ssl_session_timeout 10m;


  # ----- Logging

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  error_log /var/log/nginx/error.log debug;
  error_page 502 /502.html;


  # ----- Reverse proxy cache

  proxy_cache_path /opt/nginx/proxy-cache levels=1:2 keys_zone=EfDiCache:8m max_size=1000m inactive=600m;
  proxy_temp_path /opt/nginx/proxy-temp;


  # ----- Let's Encrypt + PubSub-publishing

  # 32 m is the default, seems a little bit low?
  nchan_max_reserved_memory 64m;

  server {
    # Port 81 should be blocked, should not be accessible from the publ internet.
    listen 81;  # [47BKFG2] in PubSub.scala

    # The app server posts to this endpoint to publish WebSocket / Long Polling etc events.
    location ~ /-/pubsub/publish/(.*)$ {
      nchan_publisher;
      nchan_channel_id "$1";
      nchan_channel_id_split_delimiter ",";
    }

    # The app server posts a hostname to this endpoint, in order to generate Nginx config files
    # for a new forum, + Let'sEncrypt priv & publ keys.
    # ... But oh so complicated to install LuaJIT in Nginx. Instead, change to OpenResty?
    # For now, have Play Framework create a file in /some/dir/ with name = the.hostname.example.com
    # and inotifywait for such files to appear, and then run the Bash script that generates
    # the Nginx config stuff? Or just buy a wildcard cert instead ...
    location /create-virtual-host {
      # lua ... but oh, no lua.
      # See: http://stackoverflow.com/a/22891362/694469
      # content_by_lua 'os.execute("/somewhere/create-virtual-host.sh")';
      # (re the other answers: don't want to add FastCGI and anyway I tested, I didn't get it
      # working quickly enough, boring.)
    }
  }


  # ----- Virtual hosts

  # They all listen on port 80 and 443.

  # Default virtual host.
  server {
    server_name _;
    include /etc/nginx/vhost.conf;
  }

  include /etc/nginx/sites-enabled/*.conf;

}

# vim: et ts=2 sw=2 tw=0 list
