# nginx config file on the host
# tls: https://mozilla.github.io/server-side-tls/ssl-config-generator/

# useful modules?
# - https://github.com/vozlt/nginx-module-vts


user nginx;

# 'auto' attempts to auto detect the number of CPU cores.
worker_processes auto;

# Run nginx in the foreground.
# (We run nginx via Docker, and by default the nginx command exits directly (because it
# starts nginx as a background daemon) which makes the docker container exits, and then
# the background daemon stops too.)
daemon off;

events {
  # in the Docker image, `ulimit -n` â€“> 524288, and say 10 cores? -> max 52400, say 30 000 then
  worker_connections 30000;
}

http {
  sendfile on;
  server_tokens off;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log  /var/log/nginx/access.log  main;

  error_log /var/log/nginx/error.log debug;
  error_page 502 /502.html;

  keepalive_timeout  65;


  # 32 m is the default, seems a little bit low?
  nchan_max_reserved_memory 64m;

  # This server & endpoint publishes WebSocket etc events.
  # Port 81 should be blocked from the publ intrernet, but accessible from the
  # Play app server, so that it can publish envents.
  #
  server {
    listen 81;  # [47BKFG2] in PubSub.scala
    location ~ /-/pubsub/publish/(.*)$ {
      nchan_publisher;
      nchan_channel_id "$1";
      nchan_channel_id_split_delimiter ",";
    }
  }

    server {
        listen 80;
        listen 443;

        location /-/pubsub/subscribe/ {
          location ~ /-/pubsub/subscribe/(.*)$ {
            nchan_subscriber;
            nchan_channel_id "$1";
            nchan_subscriber_first_message newest;

            # Ask the appserver if this is okay, and in that way also tell it that this user
            # has now connected. (Apparently nchan forwards all cookies to the appserver.)
            # (Any '?' here gets url encoded and then no endpoint matches
            # so the app server replies 404 Not Found. So don't use the query string here.)
            nchan_authorize_request /-/pubsub/authorize-subscriber/$1;
          }
        }

        location / {
          proxy_http_version 1.1;
          # The docker host has ip 172.17.0.1, for me.
          # Read more here: https://docs.docker.com/v1.7/articles/networking/
          # and: https://github.com/docker/docker/issues/17305
          # and: http://stackoverflow.com/a/31213387/694469
          proxy_pass http://172.17.0.1:9000/;
          #proxy_pass http://localhost/;

          # $host = the first servername, no port number.
          # $http_host = the Host header, if any.
          proxy_set_header Host  $http_host;
          proxy_set_header X-Forwarded-For  $remote_addr;
          proxy_connect_timeout       900;
          proxy_send_timeout          900;
          proxy_read_timeout          900;
          send_timeout                900;
        }

        location /-/uploads/public/ {
          # This dir is read-only mounted in the relevant docker-compose.yml, in the Nginx
          # container, and read-write mounted in the Play app container.
          alias /opt/debiki/uploads/public/;
          access_log off;
          autoindex off;
          sendfile on;
          # Makes things slower: 14 600 req/sec instead of like 15 300, for 1kb image.
          # aio threads;
          sendfile_max_chunk 2m;
          # If off, then like 14 100 req/sec instead of like 15 300, for 1kb image.
          tcp_nopush on;
          expires 31d;  # later:  expires 365d;

          location ~ \.(mp4|m4v|m4a)$ {
            mp4;
          }
          # (could: ~ .mp4.(m3u8|ts)$ { hls; }
          # ngx_http_hls_module & _f4f_ = commercial though)
        }

        location /502.html{
          root /opt/nginx/html/;
        }

    }
}

# vim: et ts=2 sw=2 tw=0 list
